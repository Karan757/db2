Further execution plans

-------------------------------------------------------------------------------------------
The owner of the following tables is NIKOVITS.

PRODUCT(prod_id, name, color, weight)
SUPPLIER(supl_id, name, status, address)
PROJECT(proj_id, name, address)
SUPPLY(supl_id, prod_id, proj_id, amount, date)
--------------------------------------------------------------------------------------------
                                                                         x
PLAN_TABLE.position column shows the left or right children             / \
                                                                       /   \
                                                                      1     2

-- Cannot use index (because of '+1', which is an expression and not the column itself)
select sum(weight) from nikovits.product where prod_id+1=2;
---------------------------------------------------
SELECT STATEMENT +  + 
  SORT + AGGREGATE + 
    TABLE ACCESS + FULL + NIKOVITS.PRODUCT

-- uses index
select sum(weight) from nikovits.product where prod_id=floor(sqrt(44*23));
---------------------------------------------------------
SELECT STATEMENT +  + 
  SORT + AGGREGATE + 
    TABLE ACCESS + BY INDEX ROWID + NIKOVITS.PRODUCT
      INDEX + UNIQUE SCAN + NIKOVITS.PROD_ID_IDX


-- Index usage depends on selection cardinality
-- no index usage
select sum(weight) from nikovits.product where prod_id < 500;
--------------------------------------------
SELECT STATEMENT +  +     
  SORT + AGGREGATE +      
    TABLE ACCESS + FULL + NIKOVITS.PRODUCT  

-- uses index
select sum(weight) from nikovits.product where prod_id < 10;
-------------------------------------------
SELECT STATEMENT +  + 
  SORT + AGGREGATE + 
    TABLE ACCESS + BY INDEX ROWID BATCHED + NIKOVITS.PRODUCT
      INDEX + RANGE SCAN + NIKOVITS.PROD_ID_IDX


-- Some plans with cluster
create cluster ckod_cl(ckod integer);
create index ckod_i on cluster ckod_cl;
create table cikk_ind_cl(ckod, cnev, szin, suly) cluster ckod_cl(ckod) as select * from cikk;
create table szallit_ind_cl(szkod, ckod, pkod, mennyiseg, datum) cluster ckod_cl(ckod) as select * from szallit;

SELECT sum(suly) FROM cikk_ind_cl NATURAL JOIN szallit_ind_cl WHERE szin='piros';
-----------------------------------------------------------
SELECT STATEMENT
  SORT  AGGREGATE    
    NESTED LOOPS     
      TABLE ACCESS  BY INDEX ROWID  CIKK_IND_CL  
        INDEX  RANGE SCAN  C_SZIN1  
      TABLE ACCESS  CLUSTER  SZALLIT_IND_CL  

-- another plan
SELECT STATEMENT
  SORT AGGREGATE
    NESTED LOOPS
      TABLE ACCESS FULL CIKK_IND_CL
      TABLE ACCESS CLUSTER SZALLIT_IND_CL
        INDEX UNIQUE SCAN CKOD_I


-- Two tables in a hash cluster 
create cluster ckod_hash(ckod integer) hashkeys 31;
create table cikk_hash_cl(ckod, cnev, szin, suly) cluster ckod_hash(ckod) as select * from cikk;
create table szallit_hash_cl(szkod, ckod, pkod, mennyiseg, datum) cluster ckod_hash(ckod) as select * from szallit;

SELECT sum(suly) FROM cikk_hash_cl NATURAL JOIN szallit_hash_cl WHERE szin='piros';
------------------------------------------------------------- 
SELECT STATEMENT
  SORT AGGREGATE
    NESTED LOOPS
      TABLE ACCESS FULL CIKK_HASH_CL
      TABLE ACCESS HASH SZALLIT_HASH_CL

-- Reading from a hash cluster
select * from szallit_hash_cl where ckod=1;
-------------------------------------------
SELECT STATEMENT
  TABLE ACCESS HASH SZALLIT_HASH_CL


-- Using two indexes for a table.
AND-EQUAL -> intersection of ROWIDs
SELECT /*+ AND_EQUAL(s supply_supplier_idx supply_prod_idx) */ sum(amount) 
FROM nikovits.supply s WHERE prod_id=9 AND supl_id=9;
------------------------------------------------------------
SELECT STATEMENT
  SORT AGGREGATE
    TABLE ACCESS BY INDEX ROWID SUPPLY
      AND-EQUAL
        INDEX RANGE SCAN SUPPLY_PROD_IDX
        INDEX RANGE SCAN SUPPLY_SUPPLIER_IDX


-- Using bit-vectors
select sum(amount) from nikovits.supply where prod_id=9 and supl_id=9;
------------------------------------------------------------
SELECT STATEMENT
  SORT AGGREGATE
    TABLE ACCESS BY INDEX ROWID SUPPLY
      BITMAP CONVERSION TO ROWIDS
        BITMAP AND
          BITMAP CONVERSION FROM ROWIDS
            INDEX RANGE SCAN SUPPLY_PROD_IDX
          BITMAP CONVERSION FROM ROWIDS
            INDEX RANGE SCAN SUPPLY_SUPPLIER_IDX


-- Two equivalent plans can give different runtime.
-- If we give prod_id > 999, it will be faster, though the plan is the same.
select /*+ FULL(p) USE_NL(p,s) */ sum(amount) from nikovits.product p, nikovits.supply s where p.prod_id < 999;
--------------------------------------------------------------
SELECT STATEMENT
  SORT  AGGREGATE
    NESTED LOOPS  
      TABLE ACCESS  FULL  SZALLIT
      TABLE ACCESS  FULL  CIKK  


-- SORT AGGREGATE (above) is much cheaper than SORT ORDER BY (below).
SELECT /*+ FULL(p) USE_NL(p,s) */ * FROM nikovits.product p, nikovits.supply s ORDER BY p.prod_id;
------------------------------------------------
 SELECT STATEMENT
   SORT ORDER BY
     NESTED LOOPS
       TABLE ACCESS FULL SZALLIT
       TABLE ACCESS FULL CIKK


